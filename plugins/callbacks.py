import asyncio
import logging
import random
import string 
import requests
from pyromod import listen
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from helper.database import codeflixbots
from config import Config
from plugins.helper_func import *

logger = logging.getLogger(__name__)

def generate_random_alphanumeric():
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(8))

@Client.on_callback_query()
async def cb_handler(client, query: CallbackQuery):
    data = query.data
    user_id = query.from_user.id

    try:
        user = await codeflixbots.col.find_one({"_id": user_id})
        if user and user.get("ban_status", {}).get("is_banned", False):
            return await query.message.edit_text(
                "üö´ You are banned from using this bot.\n\nIf you think this is a mistake, contact the admin.",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üì© Contact Admin", url=Config.ADMIN_URL)]]
                )
            )

        if data == "home":
            await query.message.edit_text(
                text=Config.START_TXT.format(
                    first=query.from_user.first_name,
                    last=query.from_user.last_name or "",
                    username=f"@{query.from_user.username}" if query.from_user.username else "None",
                    mention=query.from_user.mention,
                    id=query.from_user.id
                ),
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ä¢ ·¥ç è ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ‚Ä¢", callback_data='help')],
                    [InlineKeyboardButton('‚Ä¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás', url='https://t.me/botskingdoms'), InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url='https://t.me/botskingdomsgroup')],
                    [InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ', callback_data='about'), InlineKeyboardButton('D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä ‚Ä¢', url='https://t.me/botskingdoms')]
                ])
            )
        elif data == "caption":
            await query.message.edit_text(
                text=Config.CAPTION_TXT,
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url='https://t.me/botskingdomsgroup'), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
                ])
            )
        elif data == "help":
            await query.message.edit_text(
                text=Config.HELP_TXT.format(query.from_user.mention),
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ä¢ ·¥Ä·¥ú·¥õ·¥è  Ä·¥á…¥·¥Ä·¥ç·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ ‚Ä¢", callback_data='file_names')],
                    [InlineKeyboardButton('‚Ä¢ ·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü', callback_data='thumbnail'), InlineKeyboardButton('·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥ ‚Ä¢', callback_data='caption')],
                    [InlineKeyboardButton('‚Ä¢ ·¥ç·¥á·¥õ·¥Ä·¥Ö·¥Ä·¥õ·¥Ä', callback_data='meta'), InlineKeyboardButton('·¥Ö·¥è…¥·¥Ä·¥õ·¥á ‚Ä¢', callback_data='donate')],
                    [InlineKeyboardButton("‚Ä¢ S·¥á«´·¥ú·¥á…¥·¥Ñ·¥á" , callback_data='sequence')],
                    [InlineKeyboardButton('‚Ä¢  ú·¥è·¥ç·¥á ‚Ä¢', callback_data='home')]
                ])
            )
        elif data == "sequence":
            await query.message.edit_text(
                "<b>S·¥á…¥·¥Ö ·¥ç·¥á “ì…™ ü·¥ás ·¥Ä…¥·¥Ö I ·¥°…™ ü ü …¢…™·¥†·¥á  è·¥è·¥ú ·¥õ ú·¥Ä·¥õ “ì…™ ü·¥ás …™…¥ ·¥Ä ·¥ò·¥á Ä“ì·¥á·¥Ñ·¥õ s·¥á«´·¥ú·¥á…¥·¥Ñ·¥á...!! \n\n ú·¥á Ä·¥á …™Íú±  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú “ì·¥è Ä s·¥á«´·¥ú·¥á…¥·¥Ñ·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±: \n\n·¥Ä·¥°·¥ás·¥è·¥ç·¥á C·¥è·¥ç·¥ç·¥Ä…¥·¥Ösü´ß \n\n/start_sequence - T·¥è s·¥õ·¥Ä Ä·¥õ s·¥á«´·¥ú·¥á…¥·¥Ñ·¥á. \n/end_sequence - T·¥è ·¥á…¥·¥Ö s·¥á«´·¥ú·¥á…¥·¥Ñ·¥á.</b>",
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"),
                    InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help")
                ]])
            )
        elif data == "meta":
            await query.message.edit_text("<b>--Metadata Settings:--</b> \n\n‚ûú /metadata: Turn on or off metadata. \n\n<b><u>Description</u></b> <b><i>: Metadata will change MKV video files including all audio, streams, and subtitle titles.</i></b>",
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á", callback_data="close"), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
                ])
            )
        elif data == "donate":
            await query.message.edit_text(
                text=Config.DONATE_TXT,
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ä¢  ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton("·¥è·¥°…¥·¥á Ä ‚Ä¢", url='https://t.me/botskingdoms')]
                ])
            )
        elif data == "file_names":
            format_template = await codeflixbots.get_format_template(user_id)
            await query.message.edit_text(
                text=Config.FILE_NAME_TXT.format(format_template=format_template),
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á", callback_data="close"), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
                ])
            )    
        elif data == "thumbnail":
            await query.message.edit_text(
                text=Config.THUMBNAIL_TXT,
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á", callback_data="close"), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="help")]
                ])
            )    
        elif data == "about":
            await query.message.edit_text(
                text=Config.ABOUT_TXT,
                disable_web_page_preview=True,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"),
                    InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="home")
                ]])
            )
        elif data == "close":
            try:
                await query.message.delete()
                if query.message.reply_to_message:
                    await query.message.reply_to_message.delete()
            except Exception:
                await query.message.delete()

        elif data.startswith("rfs_ch_"):
            cid = int(data.split("_")[2])
            try:
                chat = await client.get_chat(cid)
                mode = await codeflixbots.get_channel_mode(cid)
                status = "üü¢ ·¥è…¥" if mode == "on" else "üî¥ ·¥è“ì“ì"
                new_mode = "off" if mode == "on" else "on"
                buttons = [
                    [InlineKeyboardButton(f" Ä·¥á«´ ·¥ç·¥è·¥Ö·¥á {'OFF' if mode == 'on' else 'ON'}", callback_data=f"rfs_toggle_{cid}_{new_mode}")],
                    [InlineKeyboardButton("‚Äπ  ô·¥Ä·¥Ñ·¥ã", callback_data="fsub_back")]
                ]
                await query.message.edit_text(
                    f"Channel: {chat.title}\nCurrent Force-Sub Mode: {status}",
                    reply_markup=InlineKeyboardMarkup(buttons)
                )
            except Exception:
                await query.answer("Failed to fetch channel info", show_alert=True)

        elif data.startswith("rfs_toggle_"):
            cid, action = data.split("_")[2:]
            cid = int(cid)
            mode = "on" if action == "on" else "off"

            await codeflixbots.set_channel_mode(cid, mode)
            await query.answer(f"Force-Sub set to {'ON' if mode == 'on' else 'OFF'}")

            chat = await client.get_chat(cid)
            status = "üü¢ ON" if mode == "on" else "üî¥ OFF"
            new_mode = "off" if mode == 'on' else "on"
            buttons = [
                [InlineKeyboardButton(f" Ä·¥á«´ ·¥ç·¥è·¥Ö·¥á {'OFF' if mode == 'on' else 'ON'}", callback_data=f"rfs_toggle_{cid}_{new_mode}")],
                [InlineKeyboardButton("‚Äπ  ô·¥Ä·¥Ñ·¥ã", callback_data="fsub_back")]
            ]
            await query.message.edit_text(
                f"Channel: {chat.title}\nCurrent Force-Sub Mode: {status}",
                reply_markup=InlineKeyboardMarkup(buttons)
            )

        elif data == "fsub_back":
            channels = await codeflixbots.show_channels()
            buttons = []
            for cid in channels:
                try:
                    chat = await client.get_chat(cid)
                    mode = await codeflixbots.get_channel_mode(cid)
                    status = "üü¢" if mode == "on" else "üî¥"
                    buttons.append([InlineKeyboardButton(f"{status} {chat.title}", callback_data=f"rfs_ch_{cid}")])
                except Exception:
                    continue
            if not buttons:
                buttons.append([InlineKeyboardButton("No Channels Found", callback_data="no_channels")])
            await query.message.edit_text(
                "s·¥á ü·¥á·¥Ñ·¥õ ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥õ·¥è…¢…¢ ü·¥á …™·¥õs “ì·¥è Ä·¥Ñ·¥á-s·¥ú ô ·¥ç·¥è·¥Ö·¥á:",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("·¥†·¥á Ä…™Íú∞ è ùü∑", callback_data="verify_1_cbb"), InlineKeyboardButton("·¥†·¥á Ä…™Íú∞ è ùü∏", callback_data="verify_2_cbb")],
                [InlineKeyboardButton("·¥Ñ·¥è·¥ú…¥·¥õs", callback_data="verify_count")]
            ])
            await query.message.edit_text(" ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú±:\n\n ‚û≤  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ö·¥è ·¥õ·¥ú Ä…¥ ·¥è…¥/·¥èÍú∞Íú∞ ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú± & A üs·¥è  è·¥è·¥ú ·¥Ñ·¥Ä…¥ s·¥á·¥á ·¥Ñ·¥è·¥ú…¥·¥õs.", reply_markup=keyboard)

        elif data == "verify_1_cbb":
            settings = await codeflixbots.get_verification_settings()
            verify_status_1 = settings.get("verify_status_1", False)
            verify_token_1 = settings.get("verify_token_1", "Not set")
            api_link_1 = settings.get("api_link_1", "Not set")
            current_status = "On" if verify_status_1 else "Off"
            
            buttons = [
                [
                    InlineKeyboardButton(f"O…¥{' ‚úÖ' if verify_status_1 else ''}", callback_data='on_vrfy_1'),
                    InlineKeyboardButton(f"O“ì“ì{' ‚úÖ' if not verify_status_1 else ''}", callback_data='off_vrfy_1')
                ],
                [
                    InlineKeyboardButton("S·¥á·¥õ ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥", callback_data="vrfy_set_1")
                ],
                [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="verify_settings")]
            ]
            keyboard = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(f"<b>·¥†·¥á Ä…™Íú∞ è ùü∑ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±:\n\nÍú± ú·¥è Ä·¥õ…¥·¥á Ä: {api_link_1}\nAPI: {verify_token_1}\n\nÍú±·¥õ·¥Ä·¥õ·¥úÍú±:</b> {current_status}", reply_markup=keyboard)

        elif data == "verify_2_cbb":
            settings = await codeflixbots.get_verification_settings()
            verify_status_2 = settings.get("verify_status_2", False)
            verify_token_2 = settings.get("verify_token_2", "Not set")
            api_link_2 = settings.get("api_link_2", "Not set")
            current_status = "On" if verify_status_2 else "Off"

            buttons = [
                [
                    InlineKeyboardButton(f"O…¥{' ‚úÖ' if verify_status_2 else ''}", callback_data='on_vrfy_2'),
                    InlineKeyboardButton(f"O“ì“ì{' ‚úÖ' if not verify_status_2 else ''}", callback_data='off_vrfy_2')
                ],
                [
                    InlineKeyboardButton("S·¥á·¥õ ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥", callback_data="vrfy_set_2")
                ],
                [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="verify_settings")]
            ]
            keyboard = InlineKeyboardMarkup(buttons)
            await query.message.edit_text(f"<b>·¥†·¥á Ä…™Íú∞ è ùü∏ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±:\n\nÍú± ú·¥è Ä·¥õ…¥·¥á Ä: {api_link_2}\nAPI: {verify_token_2}\n\nÍú±·¥õ·¥Ä·¥õ·¥úÍú±:</b> {current_status}", reply_markup=keyboard)

        elif data == "on_vrfy_1":
            try:
                await codeflixbots.set_verification_mode_1(True)
                await query.answer("Verification 1 turned ON", show_alert=True)
                
                # Refresh the display to show updated tick mark
                settings = await codeflixbots.get_verification_settings()
                verify_status_1 = settings.get("verify_status_1", False)
                verify_token_1 = settings.get("verify_token_1", "Not set")
                api_link_1 = settings.get("api_link_1", "Not set")
                current_status = "On" if verify_status_1 else "Off"
                
                buttons = [
                    [
                        InlineKeyboardButton(f"O…¥{' ‚úÖ' if verify_status_1 else ''}", callback_data='on_vrfy_1'),
                        InlineKeyboardButton(f"O“ì“ì{' ‚úÖ' if not verify_status_1 else ''}", callback_data='off_vrfy_1')
                    ],
                    [
                        InlineKeyboardButton("S·¥á·¥õ ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥", callback_data="vrfy_set_1")
                    ],
                    [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="verify_settings")]
                ]
                keyboard = InlineKeyboardMarkup(buttons)
                await query.message.edit_text(f"<b>·¥†·¥á Ä…™Íú∞ è ùü∑ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±:\n\nÍú± ú·¥è Ä·¥õ…¥·¥á Ä: {api_link_1}\nAPI: {verify_token_1}\n\nÍú±·¥õ·¥Ä·¥õ·¥úÍú±:</b> {current_status}", reply_markup=keyboard)
            except Exception as e:
                await query.answer(f"An unexpected error occurred: {e}", show_alert=True)

        elif data == "off_vrfy_1":
            try:
                await codeflixbots.set_verification_mode_1(False)
                await query.answer("Verification 1 turned OFF", show_alert=True)
                
                # Refresh the display to show updated tick mark
                settings = await codeflixbots.get_verification_settings()
                verify_status_1 = settings.get("verify_status_1", False)
                verify_token_1 = settings.get("verify_token_1", "Not set")
                api_link_1 = settings.get("api_link_1", "Not set")
                current_status = "On" if verify_status_1 else "Off"
                
                buttons = [
                    [
                        InlineKeyboardButton(f"O…¥{' ‚úÖ' if verify_status_1 else ''}", callback_data='on_vrfy_1'),
                        InlineKeyboardButton(f"O“ì“ì{' ‚úÖ' if not verify_status_1 else ''}", callback_data='off_vrfy_1')
                    ],
                    [
                        InlineKeyboardButton("S·¥á·¥õ ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥", callback_data="vrfy_set_1")
                    ],
                    [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="verify_settings")]
                ]
                keyboard = InlineKeyboardMarkup(buttons)
                await query.message.edit_text(f"<b>·¥†·¥á Ä…™Íú∞ è ùü∑ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±:\n\nÍú± ú·¥è Ä·¥õ…¥·¥á Ä: {api_link_1}\nAPI: {verify_token_1}\n\nÍú±·¥õ·¥Ä·¥õ·¥úÍú±:</b> {current_status}", reply_markup=keyboard)
            except Exception as e:
                await query.answer(f"An unexpected error occurred: {e}", show_alert=True)
                
        elif data == "on_vrfy_2":
            try:
                await codeflixbots.set_verification_mode_2(True)
                await query.answer("Verification 2 turned ON", show_alert=True)
                
                # Refresh the display to show updated tick mark
                settings = await codeflixbots.get_verification_settings()
                verify_status_2 = settings.get("verify_status_2", False)
                verify_token_2 = settings.get("verify_token_2", "Not set")
                api_link_2 = settings.get("api_link_2", "Not set")
                current_status = "On" if verify_status_2 else "Off"
                
                buttons = [
                    [
                        InlineKeyboardButton(f"O…¥{' ‚úÖ' if verify_status_2 else ''}", callback_data='on_vrfy_2'),
                        InlineKeyboardButton(f"O“ì“ì{' ‚úÖ' if not verify_status_2 else ''}", callback_data='off_vrfy_2')
                    ],
                    [
                        InlineKeyboardButton("S·¥á·¥õ ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥", callback_data="vrfy_set_2")
                    ],
                    [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="verify_settings")]
                ]
                keyboard = InlineKeyboardMarkup(buttons)
                await query.message.edit_text(f"<b>·¥†·¥á Ä…™Íú∞ è ùü∏ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±:\n\nÍú± ú·¥è Ä·¥õ…¥·¥á Ä: {api_link_2}\nAPI: {verify_token_2}\n\nÍú±·¥õ·¥Ä·¥õ·¥úÍú±:</b> {current_status}", reply_markup=keyboard)
            except Exception as e:
                await query.answer(f"An unexpected error occurred: {e}", show_alert=True)

        elif data == "off_vrfy_2":
            try:
                await codeflixbots.set_verification_mode_2(False)
                await query.answer("Verification 2 turned OFF", show_alert=True)
                
                # Refresh the display to show updated tick mark
                settings = await codeflixbots.get_verification_settings()
                verify_status_2 = settings.get("verify_status_2", False)
                verify_token_2 = settings.get("verify_token_2", "Not set")
                api_link_2 = settings.get("api_link_2", "Not set")
                current_status = "On" if verify_status_2 else "Off"
                
                buttons = [
                    [
                        InlineKeyboardButton(f"O…¥{' ‚úÖ' if verify_status_2 else ''}", callback_data='on_vrfy_2'),
                        InlineKeyboardButton(f"O“ì“ì{' ‚úÖ' if not verify_status_2 else ''}", callback_data='off_vrfy_2')
                    ],
                    [
                        InlineKeyboardButton("S·¥á·¥õ ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥", callback_data="vrfy_set_2")
                    ],
                    [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="verify_settings")]
                ]
                keyboard = InlineKeyboardMarkup(buttons)
                await query.message.edit_text(f"<b>·¥†·¥á Ä…™Íú∞ è ùü∏ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±:\n\nÍú± ú·¥è Ä·¥õ…¥·¥á Ä: {api_link_2}\nAPI: {verify_token_2}\n\nÍú±·¥õ·¥Ä·¥õ·¥úÍú±:</b> {current_status}", reply_markup=keyboard)
            except Exception as e:
                await query.answer(f"An unexpected error occurred: {e}", show_alert=True)

        elif data == "vrfy_set_1":
            msg = await query.message.edit_text("<b>Íú±·¥á…¥·¥Ö ·¥†·¥á Ä…™Íú∞ è ùü∑ Íú± ú·¥è Ä·¥õ…¥·¥á Ä ·¥ú Ä ü:\n\n ü…™·¥ã·¥á - `gplinks.com`\n\n/cancel ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü</b>")
            try:
                api_data_1 = await client.listen(chat_id=query.message.chat.id, filters=filters.text, timeout=300)
                await msg.delete()
                api_link_1_s = api_data_1.text.strip()

                msg = await api_data_1.reply("<b>Íú±·¥á…¥·¥Ö ·¥†·¥á Ä…™Íú∞ è ùü∑ Íú± ú·¥è Ä·¥õ…¥·¥á Ä ·¥Ä·¥ò…™ ·¥ã·¥á è:\n\n ü…™·¥ã·¥á - 064438447747gdg4\n\n/cancel ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü</b>")
                verify_data_1 = await client.listen(chat_id=query.message.chat.id, filters=filters.text, timeout=300)
                await msg.delete()
                verify_token_1_s = verify_data_1.text.strip()

                await codeflixbots.set_verify_1(api_link_1_s, verify_token_1_s)
                await query.message.reply_text(
                    "<b>·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ 1 Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö!</b>",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("H·¥è·¥ç·¥á", callback_data="home"), InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="verify_settings")]
                    ])
                )
            except asyncio.TimeoutError:
                await query.message.reply_text("T…™·¥ç·¥á·¥è·¥ú·¥õ. P ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.")
            except Exception as e:
                logger.error(f"Error setting verification 1: {e}")
                await query.message.reply_text(f"An error occurred: {e}")

        elif data == "vrfy_set_2":
            msg = await query.message.edit_text("<b>Íú±·¥á…¥·¥Ö ·¥†·¥á Ä…™Íú∞ è ùü∏ Íú± ú·¥è Ä·¥õ…¥·¥á Ä ·¥ú Ä ü:\n\n ü…™·¥ã·¥á - `gplinks.com`\n\n/cancel ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü</b>")
            try:
                api_data_2 = await client.listen(chat_id=query.message.chat.id, filters=filters.text, timeout=300)
                await msg.delete()
                api_link_2_s = api_data_2.text.strip()
                
                msg = await api_data_2.reply("<b>Íú±·¥á…¥·¥Ö ·¥†·¥á Ä…™Íú∞ è ùü∏ Íú± ú·¥è Ä·¥õ…¥·¥á Ä ·¥Ä·¥ò…™ ·¥ã·¥á è:\n\n ü…™·¥ã·¥á - 064438447747gdg4\n\n/cancel ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü</b>")
                verify_data_2 = await client.listen(chat_id=query.message.chat.id, filters=filters.text, timeout=300)
                await msg.delete()
                verify_token_2_s = verify_data_2.text.strip()
                
                await codeflixbots.set_verify_2(api_link_2_s, verify_token_2_s)
                await query.message.reply_text(
                    "<b>·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ 2 Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö!</b>",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("H·¥è·¥ç·¥á", callback_data="home"), InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="verify_settings")]
                    ])
                )
            except asyncio.TimeoutError:
                await query.message.reply_text("T…™·¥ç·¥á·¥è·¥ú·¥õ. P ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.")
            except Exception as e:
                logger.error(f"Error setting verification 2: {e}")
                await query.message.reply_text(f"An error occurred: {e}")

        elif data == "verify_count":
            today = await codeflixbots.get_vr_count_combined('today')
            yesterday = await codeflixbots.get_vr_count_combined('yesterday')
            this_week = await codeflixbots.get_vr_count_combined('this_week')
            this_month = await codeflixbots.get_vr_count_combined('this_month')
            last_month = await codeflixbots.get_vr_count_combined('last_month')
            
            count_text = (
                "<b>üìä ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñs:\n\n"
                f"üë• ·¥õ·¥è·¥Ö·¥Ä è: {today} ·¥ús·¥á Äs\n"
                f"üìä  è·¥ás·¥õ·¥á Ä·¥Ö·¥Ä è: {yesterday} ·¥ús·¥á Äs\n"
                f"üìÖ ·¥õ ú…™s ·¥°·¥á·¥á·¥ã: {this_week} ·¥ús·¥á Äs\n"
                f"üìÜ ·¥õ ú…™s ·¥ç·¥è…¥·¥õ ú: {this_month} ·¥ús·¥á Äs\n"
                f"üìã  ü·¥Äs·¥õ ·¥ç·¥è…¥·¥õ ú: {last_month} ·¥ús·¥á Äs</b>"
            )
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ  Ä·¥á“ì Ä·¥ás ú", callback_data="verify_count")],
                [InlineKeyboardButton("‚Äπ  ô·¥Ä·¥Ñ·¥ã", callback_data="verify_settings")]
            ])
            
            await query.message.edit_text(count_text, reply_markup=keyboard)

    except Exception as e:
        if "MESSAGE_NOT_MODIFIED" in str(e) or "message is not modified" in str(e):
            await query.answer("‚úÖ Data is already up to date!", show_alert=True)
        else:
            await query.answer(f"Error: {e}", show_alert=True)

#============= Response 1 and 2 ========================
alias = generate_random_alphanumeric()

resp_1 = f'https://{api_link_1}/api?api={verify_token_1}&alias={alias}'
response = requests.get(resp_1, timeout=10)
rjson = response.json()

if rjson.get("status") == "success" and response.status_code == 200:
    short_link = rjson.get("shortenedUrl", "")

resp_2 = f'https://{api_link_2}/api?api={verify_token_2}&alias={alias}'
response = requests.get(resp_2, timeout=10)
rjson = response.json()

if rjson.get("status") == "success" and response.status_code == 200:
    short_link = rjson.get("shortenedUrl", "")
